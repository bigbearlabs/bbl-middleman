// Generated by CoffeeScript 1.6.2
(function() {
  var app, that;

  that = this;

  app = this.appModule;

  this.appModule.factory('globalsSvc', function($log, $rootScope, $location, userPrefs, envs) {
    var obj;

    $rootScope.authentication = {
      loginAction: {
        url: '#/login',
        message: 'Login'
      },
      logoutAction: {
        url: '#/logout',
        message: 'Logout'
      },
      setLoggedIn: function() {
        this.loggedIn = true;
        return this.nextAction = this.logoutAction;
      },
      setLoggedOut: function() {
        userPrefs.clear('evernote_authToken');
        this.loggedIn = false;
        return this.nextAction = this.loginAction;
      }
    };
    $rootScope.authentication.loggedIn = false;
    $rootScope.authentication.nextAction = $rootScope.authentication.loginAction;
    $rootScope.resolveError = function(error) {
      return 'http://support.bigbearlabs.com/forums/191718-general/category/68202-tagyeti';
    };
    $rootScope.acceptError = function(e) {
      $rootScope.error = null;
      return $rootScope.msg = null;
    };
    return obj = {
      doit: function() {
        envs.apply();
        return obj.update();
      },
      handleError: function(e) {
        $log.error(e);
        $rootScope.msg = "error: " + e;
        $rootScope.error = e;
        return $rootScope.$apply();
      },
      update: function() {
        var _ref;

        app.userDataSource.init();
        $rootScope.authentication.setLoggedIn();
        return (_ref = app.stickersC) != null ? _ref.update() : void 0;
      }
    };
  });

  this.appModule.factory('userPrefs', function($log) {
    return app.userPrefs = {
      env: 'production',
      sticker_prefix_pattern: /^##/,
      sticker_prefix: '##',
      set: function(key, val) {
        if (val === void 0) {
          throw "value for key " + key + " is undefined";
        }
        $log.info("setting " + key);
        this[key] = val;
        return localStorage.setItem(key, JSON.stringify(val));
      },
      get: function(k) {
        var e, parsed, val;

        val = localStorage.getItem(k);
        if (val && val !== 'undefined') {
          this[k] = val;
        } else {
          val = this[k];
        }
        if (val) {
          try {
            return parsed = JSON.parse(val);
          } catch (_error) {
            e = _error;
            return val;
          }
        } else {
          console.log("returning null for '" + k + "'");
          return null;
        }
      },
      clear: function(key) {
        return localStorage.clear(key);
      },
      needsIntro: function() {
        var nextIntroVal;

        nextIntroVal = this.get('nextIntro');
        if (!nextIntroVal) {
          return true;
        } else {
          return new Date(nextIntroVal).isPast();
        }
      },
      setFinishedIntro: function() {
        return this.set('nextIntro', this.nextDate().getTime());
      },
      nextDate: function() {
        if (this.env === 'dev') {
          return Date.tomorrow();
        } else {
          return Date.oneYearLater();
        }
      }
    };
  });

  this.appModule.factory('envs', function($log, $injector, userPrefs) {
    var obj;

    return userPrefs.envs = obj = {
      production: {
        userDataSource: 'stubDataSvc',
        apiServer: 'http://mackerel-everest.herokuapp.com'
      },
      dev: {
        userDataSource: 'stubDataSvc',
        apiServer: 'http://localhost:8081'
      },
      apply: function(env) {
        env || (env = userPrefs.get('env'));
        console.log("applying env '" + env + "'");
        app.userDataSource = $injector.get(this[env].userDataSource);
        return app.apiServer = this[env].apiServer;
      }
    };
  });

  Date.tomorrow = function() {
    var date;

    date = new Date();
    date.setDate(date.getDate() + 1);
    return date;
  };

  Date.oneYearLater = function() {
    var date;

    date = new Date();
    date.setFullYear(date.getFullYear() + 1);
    return date;
  };

  Date.prototype.isPast = function() {
    var now;

    now = new Date();
    return this.getTime() < now.getTime();
  };

}).call(this);
